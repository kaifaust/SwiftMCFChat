Framework
Multipeer Connectivity
Support peer-to-peer connectivity and the discovery of nearby devices.
iOS 7.0+
iPadOS 7.0+
Mac Catalyst 13.0+
macOS 10.10+
tvOS 10.0+
visionOS 1.0+
Overview
The Multipeer Connectivity framework supports the discovery of services provided by nearby devices and supports communicating with those services through message-based data, streaming data, and resources (such as files). In iOS, the framework uses infrastructure Wi-Fi networks, peer-to-peer Wi-Fi, and Bluetooth personal area networks for the underlying transport. In macOS and tvOS, it uses infrastructure Wi-Fi, peer-to-peer Wi-Fi, and Ethernet.
Important
Apps that use the local network must provide a usage string in their Info.plist with the key NSLocalNetworkUsageDescription. Apps that use Bonjour must also declare the services they browse, using the NSBonjourServices key.
Architecture
When working with the Multipeer Connectivity framework, your app must interact with several types of objects:
Session objects (MCSession) support communication between connected peer devices. Your app creates a session and adds peers to it when peers accept an invitation to connect, and it creates a session when invited to connect by another peer. Session objects maintain a set of peer ID objects that represent the peers connected to the session.
Advertiser objects (MCNearbyServiceAdvertiser) tell nearby peers that your app is willing to join sessions of a specified type. An advertiser object uses a single local peer object to provide information that identifies the device and its user to other nearby devices.
Advertiser assistant objects (MCAdvertiserAssistant) provide the same functionality as advertiser objects, but also provide a standard user interface that allows the user to accept invitations. If you wish to provide your own user interface, or if you wish to exercise additional programmatic control over which invitations are displayed, use an advertiser object directly.
Browser objects (MCNearbyServiceBrowser) let your app search programmatically for nearby devices with apps that support sessions of a particular type.
Browser view controller objects (MCBrowserViewController) provide a standard user interface that allows the user to choose nearby peers to add to a session.
Peer IDs (MCPeerID) uniquely identify an app running on a device to nearby peers.
Discovery Phase and Session Phase
This framework is used in two phases: the discovery phase and the session phase.
In the discovery phase, your app uses an MCNearbyServiceBrowser object to browse for nearby peers, optionally using the MCBrowserViewController object to display a user interface.
The app also uses an MCNearbyServiceAdvertiser object or an MCAdvertiserAssistant object to tell nearby peers that it is available, so that apps on other nearby devices can invite it to a session.
During the discovery phase, your app has limited communication with and knowledge of other peers; it has access to the discoveryInfo data that other nearby clients provide, and any context data that other peers provide when inviting it to join a session.
After the user chooses which peers to add to a session, the app invites those peers to join the session. Apps running on the nearby devices can choose whether to accept or reject the invitation, and can ask their users for permission.
If the peer accepts the invitation, the browser establishes a connection with the advertiser and the session phase begins. In this phase, your app can perform direct communication to one or more peers within the session. The framework notifies your app through delegate callbacks when peers join the session and when they leave the session.
If the app moves into the background, the framework stops advertising and browsing and disconnects any open sessions. Upon returning to the foreground, the framework automatically resumes advertising and browsing, but the developer must reestablish any closed sessions.
Topics
Classes
class MCAdvertiserAssistant
The MCAdvertiserAssistant is a convenience class that handles advertising, presents incoming invitations to the user, and handles users’ responses. Use this class to provide a user interface for handling invitations when your app does not require programmatic control over the invitation process.
class MCBrowserViewController
The MCBrowserViewController class presents nearby devices to the user and enables the user to invite nearby devices to a session. To use this class in iOS or tvOS, call methods from the underlying UIViewController class (prepare(for:sender:) and performSegue(withIdentifier:sender:) for storyboards or present(_:animated:completion:) and dismiss(animated:completion:) for nib-based views) to present and dismiss the view controller. In macOS, use the comparable NSViewController methods presentAsSheet(_:) and dismiss(_:) instead.
class MCNearbyServiceAdvertiser
The MCNearbyServiceAdvertiser class publishes an advertisement for a specific service that your app provides through the Multipeer Connectivity framework and notifies its delegate about invitations from nearby peers.
class MCNearbyServiceBrowser
Searches (by service type) for services offered by nearby devices using infrastructure Wi-Fi, peer-to-peer Wi-Fi, and Bluetooth (in iOS) or Ethernet (in macOS and tvOS), and provides the ability to easily invite those devices to a Multipeer Connectivity session (MCSession).
class MCPeerID
An MCPeerID object represents a peer in a multipeer session.
class MCSession
An MCSession object enables and manages communication among all peers in a Multipeer Connectivity session.
Protocols
protocol MCAdvertiserAssistantDelegate
The MCAdvertiserAssistantDelegate protocol describes the methods that the delegate object for an MCAdvertiserAssistant instance can implement to handle advertising-related events.
protocol MCBrowserViewControllerDelegate
The MCBrowserViewControllerDelegate protocol defines the methods that your delegate object can implement to handle events related to the MCBrowserViewController class.
protocol MCNearbyServiceAdvertiserDelegate
The MCNearbyServiceAdvertiserDelegate protocol describes the methods that the delegate object for an MCNearbyServiceAdvertiser instance can implement for handling events from the MCNearbyServiceAdvertiser class.
protocol MCNearbyServiceBrowserDelegate
The MCNearbyServiceBrowserDelegate protocol defines methods that a MCNearbyServiceBrowser object’s delegate can implement to handle browser-related events.
protocol MCSessionDelegate
The MCSessionDelegate protocol defines methods that a delegate of the MCSession class can implement to handle session-related events. For more information, see MCSession.
Structures
struct MCError
Reference
MultipeerConnectivity Enumerations
MultipeerConnectivity Constants

Multipeer Connectivity
MCAdvertiserAssistant
Class
MCAdvertiserAssistant
The MCAdvertiserAssistant is a convenience class that handles advertising, presents incoming invitations to the user, and handles users’ responses. Use this class to provide a user interface for handling invitations when your app does not require programmatic control over the invitation process.
iOS 7.0+
iPadOS 7.0+
Mac Catalyst 13.1+
macOS 10.10+
tvOS 10.0+
visionOS 1.0+
class MCAdvertiserAssistant
Overview
Before you can advertise a service, you must create an MCPeerID object that identifies your app and the user to nearby devices.
Topics
Initializing and Configuring
init(serviceType: String, discoveryInfo: [String : String]?, session: MCSession)
Initializes an advertiser assistant object.
var session: MCSession
The session into which new peers are added after accepting an invitation.
var delegate: (any MCAdvertiserAssistantDelegate)?
The delegate object that handles advertising-assistant-related events.
var discoveryInfo: [String : String]?
The info dictionary that was passed when this object was initialized.
var serviceType: String
The service type that your app is advertising.
Starting and Stopping the Assistant
func start()
Begins advertising the service provided by a local peer and starts the assistant.
func stop()
Stops advertising the service provided by a local peer and stops the assistant.
Relationships
Inherits From
NSObject
Conforms To
CVarArg
CustomDebugStringConvertible
CustomStringConvertible
Equatable
Hashable
NSObjectProtocol

Multipeer Connectivity
MCBrowserViewController
Class
MCBrowserViewController
The MCBrowserViewController class presents nearby devices to the user and enables the user to invite nearby devices to a session. To use this class in iOS or tvOS, call methods from the underlying UIViewController class (prepare(for:sender:) and performSegue(withIdentifier:sender:) for storyboards or present(_:animated:completion:) and dismiss(animated:completion:) for nib-based views) to present and dismiss the view controller. In macOS, use the comparable NSViewController methods presentAsSheet(_:) and dismiss(_:) instead.
iOS 7.0+
iPadOS 7.0+
Mac Catalyst 13.1+
macOS 10.10+
tvOS 10.0+
visionOS 1.0+
@MainActor
class MCBrowserViewController
Topics
Initializing a Browser View Controller
convenience init(serviceType: String, session: MCSession)
Initializes a browser view controller using the provided service type and session.
init(browser: MCNearbyServiceBrowser, session: MCSession)
Initializes a browser view controller with the provided browser and session.
var delegate: (any MCBrowserViewControllerDelegate)?
The delegate object that handles browser-view-controller-related events.
var browser: MCNearbyServiceBrowser?
The browser object that is used for discovering peers.
var session: MCSession
The multipeer session to which the invited peers are connected.
Getting and Setting the Maximum and Minimum Number of Peers
var maximumNumberOfPeers: Int
The maximum number of peers allowed in a session, including the local peer.
var minimumNumberOfPeers: Int
The minimum number of peers that need to be in a session, including the local peer.
Relationships
Inherits From
NSViewController
UIViewController
Conforms To
CVarArg
CustomDebugStringConvertible
CustomStringConvertible
Equatable
Hashable
MCNearbyServiceBrowserDelegate
NSCoding
NSEditor
NSExtensionRequestHandling
NSObjectProtocol
NSSeguePerforming
NSStandardKeyBindingResponding
NSTouchBarProvider
NSUserActivityRestoring
NSUserInterfaceItemIdentification
UIActivityItemsConfigurationProviding
UIAppearanceContainer
UIContentContainer
UIFocusEnvironment
UIPasteConfigurationSupporting
UIResponderStandardEditActions
UIStateRestoring
UITraitChangeObservable
UITraitEnvironment
UIUserActivityRestoring

Multipeer Connectivity
MCNearbyServiceAdvertiser
Class
MCNearbyServiceAdvertiser
The MCNearbyServiceAdvertiser class publishes an advertisement for a specific service that your app provides through the Multipeer Connectivity framework and notifies its delegate about invitations from nearby peers.
iOS 7.0+
iPadOS 7.0+
Mac Catalyst 13.1+
macOS 10.10+
tvOS 10.0+
visionOS 1.0+
class MCNearbyServiceAdvertiser
Overview
Before you can advertise a service, you must create an MCPeerID object that identifies your app and the user to nearby devices.
The serviceType parameter is a short text string used to describe the app’s networking protocol. It should be in the same format as a Bonjour service type: 1–15 characters long and valid characters include ASCII lowercase letters, numbers, and the hyphen, containing at least one letter and no adjacent hyphens. A short name that distinguishes itself from unrelated services is recommended; for example, a text chat app made by ABC company could use the service type "abc-txtchat". For more information about service types, read Domain Naming Conventions.
The discoveryInfo parameter is a dictionary of string key/value pairs that will be advertised for browsers to see. The content of discoveryInfo will be advertised within Bonjour TXT records, so you should keep the dictionary small for better discovery performance.
For more information about TXT records, read Bonjour Operations.
Topics
Configuring and Initialization
init(peer: MCPeerID, discoveryInfo: [String : String]?, serviceType: String)
Initializes an advertiser object.
var delegate: (any MCNearbyServiceAdvertiserDelegate)?
The delegate object that handles advertising-related events.
var discoveryInfo: [String : String]?
The info dictionary passed when this object was initialized.
var myPeerID: MCPeerID
The local peer ID for this instance.
var serviceType: String
The service type that your app is advertising
Starting and Stopping Advertisement
func startAdvertisingPeer()
Begins advertising the service provided by a local peer.
func stopAdvertisingPeer()
Stops advertising the service provided by a local peer.
Relationships
Inherits From
NSObject
Conforms To
CVarArg
CustomDebugStringConvertible
CustomStringConvertible
Equatable
Hashable
NSObjectProtocol

Multipeer Connectivity
MCNearbyServiceBrowser
Class
MCNearbyServiceBrowser
Searches (by service type) for services offered by nearby devices using infrastructure Wi-Fi, peer-to-peer Wi-Fi, and Bluetooth (in iOS) or Ethernet (in macOS and tvOS), and provides the ability to easily invite those devices to a Multipeer Connectivity session (MCSession).
iOS 7.0+
iPadOS 7.0+
Mac Catalyst 13.1+
macOS 10.10+
tvOS 10.0+
visionOS 1.0+
class MCNearbyServiceBrowser
Topics
Initializing the Browser
init(peer: MCPeerID, serviceType: String)
Initializes the nearby service browser object.
var delegate: (any MCNearbyServiceBrowserDelegate)?
The delegate object that handles browser-related events.
var myPeerID: MCPeerID
The local peer ID for this instance.
var serviceType: String
The service type to browse for.
Browsing for Peers
func startBrowsingForPeers()
Starts browsing for peers.
func stopBrowsingForPeers()
Stops browsing for peers.
Inviting Peers
func invitePeer(MCPeerID, to: MCSession, withContext: Data?, timeout: TimeInterval)
Invites a discovered peer to join a Multipeer Connectivity session.
Relationships
Inherits From
NSObject
Conforms To
CVarArg
CustomDebugStringConvertible
CustomStringConvertible
Equatable
Hashable
NSObjectProtocol

Multipeer Connectivity
MCPeerID
Class
MCPeerID
An MCPeerID object represents a peer in a multipeer session.
iOS 7.0+
iPadOS 7.0+
Mac Catalyst 13.1+
macOS 10.10+
tvOS 10.0+
visionOS 1.0+
class MCPeerID
Overview
You create a single peer ID object that represents the instance of your app running on the local device. The Multipeer Connectivity framework is responsible for creating peer ID objects that represent other devices.
To create a new peer ID for the local app and associate a display name with that ID, call init(displayName:). The peer’s name must be no longer than 63 bytes in UTF-8 encoding.
Each peer ID your app creates with init(displayName:) is unique, even when supplying the same display name. If you want a device’s peer ID to be stable over time, don’t create a new peer ID every time your app begins advertising or browsing. Instead, archive the ID when you create it, and then unarchive it the next time you need it. If you need the peer ID to be tied to the display name, you can archive the name as well, and only create a new peer ID when the name changes, as illustrated in the following code fragment:
NSString *displayName = <#Get a name#>;
 
NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
NSString *oldDisplayName = [defaults stringForKey:kDisplayNameKey];
MCPeerID *peerID;
 
if ([oldDisplayName isEqualToString:displayName]) {
    NSData *peerIDData = [defaults dataForKey:kPeerIDKey];
    peerID = [NSKeyedUnarchiver unarchiveObjectWithData:peerIDData];
} else {
    peerID = [[MCPeerID alloc] initWithDisplayName:displayName];
    NSData *peerIDData = [NSKeyedArchiver archivedDataWithRootObject:peerID];
    [defaults setObject:peerIDData forKey:kPeerIDKey];
    [defaults setObject:displayName forKey:kDisplayNameKey];
    [defaults synchronize];
}
Topics
Peer Methods
init(displayName: String)
Initializes a peer.
var displayName: String
The display name for this peer.
Relationships
Inherits From
NSObject
Conforms To
CVarArg
Copyable
CustomDebugStringConvertible
CustomStringConvertible
Equatable
Hashable
NSCoding
NSCopying
NSObjectProtocol
NSSecureCoding
SynchronizationPeerID

Multipeer Connectivity
MCSession
Class
MCSession
An MCSession object enables and manages communication among all peers in a Multipeer Connectivity session.
iOS 7.0+
iPadOS 7.0+
Mac Catalyst 13.1+
macOS 10.10+
tvOS 10.0+
visionOS 1.0+
class MCSession
Initiating a Session
To set up a session:
Use the init(displayName:) method of the MCPeerID to create a peer ID that represents the local peer, or retrieve a peer ID that you previously archived (to maintain a stable peer ID over time).
Use the peer ID with the method init(peer:) to initialize the session object.
Invite peers to join the session using an MCNearbyServiceBrowser object, an MCBrowserViewController object, or your own peer discovery code. (Sessions currently support up to 8 peers, including the local peer.)
Set up an MCNearbyServiceAdvertiser object or MCAdvertiserAssistant object to allow other devices to ask your app to join a session that they create.
If you use one of the framework’s browser objects for peer discovery, when a peer accepts an invitation, the session calls its delegate object’s session(_:peer:didChange:) method with MCSessionState.connected as the new state, along with an object that tells you which peer became connected. See Creating a Session for related methods.
If instead you write your own peer discovery code, you are responsible for managing the connection manually. See the Managing Peers Manually section for more information.
Communicating with Peers
Once you have set up the session, your app can send data to other peers by calling one of the following methods, found in Sending Data and Resources:
send(_:toPeers:with:) sends an NSData object to the specified peers.
On each recipient device, the delegate object’s session(_:didReceive:fromPeer:) method is called with the data object when the data has been fully received.
sendResource(at:withName:toPeer:withCompletionHandler:) sends the contents from an NSURL object to the specified peer. The URL can be either a local file URL or a web URL. The completionHandler block is called when the resource is fully received by the recipient peer or when an error occurs during transmission.
This method returns an NSProgress object that you can use to cancel the transfer or check the current status of the transfer.
On the recipient device, the session calls its delegate object’s session(_:didStartReceivingResourceWithName:fromPeer:with:) method when the device begins receiving the resource, and calls its session(_:didFinishReceivingResourceWithName:fromPeer:at:withError:) method when the resource has been fully received or when an error occurs.
startStream(withName:toPeer:) creates a connected byte stream (NSOutputStream) that you can use to send data to the specified peer.
On the recipient device, the session calls its delegate object’s session(_:didReceive:withName:fromPeer:) method with an NSInputStream object that represents the other endpoint of communication.
On both sides, your code must set the stream’s delegate, schedule the stream on a run loop, and open the stream. Your code must also implement stream delegate methods to manage sending and receiving stream data.
Important
Delegate calls occur on a private operation queue. If your app needs to perform an action on a particular run loop or operation queue, its delegate method should explicitly dispatch or schedule that work.
Managing Peers Manually
If instead of using the framework’s browser and advertiser objects to perform peer discovery, you decide to write your own peer discovery code (with NSNetService or the Bonjour C API, for example), you can manually connect nearby peers into a session. To do this:
Establish a connection from your app to nearby peers, and exchange peer IDs with those peers.
Each peer should serialize its own local MCPeerID object with NSKeyedArchiver, and the receiving peer should unserialize it with NSKeyedUnarchiver.
Important
Do not attempt to construct a peer ID object for a nonlocal peer using init(displayName:). A peer ID object must be constructed on the device that it represents.
Exchange connection data. After you have obtained the nearby peer’s ID object, call nearbyConnectionData(forPeer:withCompletionHandler:) to obtain a connection data object specific to that nearby peer.
When the completion handler block is called, send the resulting connection data object to that peer.
Note
Each device in the session must perform this step for each nonlocal peer in the session. So if there are four devices in the session, each device must generate a connection data object for each of the other three devices.
When your app receives connection data from another peer, it must call connectPeer(_:withNearbyConnectionData:) to add that peer to the session.
Note
Each of the nonlocal peers must also call connectPeer(_:withNearbyConnectionData:) with the connection data that it received from your app and other nonlocal peers.
You can also cancel an outstanding connection attempt by calling cancelConnectPeer(_:). These methods are described in the Managing Peers Manually group.
Disconnecting
To leave a session, your app must call disconnect(). For more details, see Leaving a Session.
Topics
Creating a Session
convenience init(peer: MCPeerID)
Creates a Multipeer Connectivity session.
init(peer: MCPeerID, securityIdentity: [Any]?, encryptionPreference: MCEncryptionPreference)
Creates a Multipeer Connectivity session, providing security information.
var delegate: (any MCSessionDelegate)?
The delegate object that handles session-related events.
var encryptionPreference: MCEncryptionPreference
A value indicating whether the connection prefers encrypted connections, unencrypted connections, or has no preference.
var myPeerID: MCPeerID
A local identifier that represents the device on which your app is currently running.
var securityIdentity: [Any]?
The security identity of the local peer.
Managing Peers Manually
func connectPeer(MCPeerID, withNearbyConnectionData: Data)
Call this method to connect a peer to the session when using your own service discovery code instead of an MCNearbyServiceBrowser or MCBrowserViewController object.
func cancelConnectPeer(MCPeerID)
Cancels an attempt to connect to a peer.
var connectedPeers: [MCPeerID]
An array of all peers that are currently connected to this session.
func nearbyConnectionData(forPeer: MCPeerID, withCompletionHandler: (Data?, (any Error)?) -> Void)
Obtains connection data for the specified peer.
Sending Data and Resources
func send(Data, toPeers: [MCPeerID], with: MCSessionSendDataMode) throws
Sends a message to nearby peers.
func sendResource(at: URL, withName: String, toPeer: MCPeerID, withCompletionHandler: (((any Error)?) -> Void)?) -> Progress?
Sends the contents of a URL to a peer.
func startStream(withName: String, toPeer: MCPeerID) throws -> OutputStream
Opens a byte stream to a nearby peer.
Leaving a Session
func disconnect()
Disconnects the local peer from the session.
Constants
enum MCSessionSendDataMode
Indicates whether delivery of data should be guaranteed.
enum MCSessionState
Indicates the current state of a given peer within a session.
enum MCEncryptionPreference
Indicates whether a session should use encryption when communicating with nearby peers.
enum Code
Error codes found in MCErrorDomain error domain NSError objects returned by methods in the Multipeer Connectivity framework.
Multipeer Connectivity Error Domain
The error domain for errors specific to Multipeer Connectivity.
Minimum and Maximum Supported Peers
Constants that define the minimum and maximum number of peers supported in a session.
Relationships
Inherits From
NSObject
Conforms To
CVarArg
CustomDebugStringConvertible
CustomStringConvertible
Equatable
Hashable
NSObjectProtocol

Multipeer Connectivity
MCAdvertiserAssistantDelegate
Protocol
MCAdvertiserAssistantDelegate
The MCAdvertiserAssistantDelegate protocol describes the methods that the delegate object for an MCAdvertiserAssistant instance can implement to handle advertising-related events.
iOS 7.0+
iPadOS 7.0+
Mac Catalyst 13.0+
macOS 10.10+
tvOS 10.0+
visionOS 1.0+
protocol MCAdvertiserAssistantDelegate : NSObjectProtocol
Overview
No assumption should be made about which queue the delegate methods are called on. It is the delegate’s responsibility to ensure that any UIKit-related updates are called on the main thread.
Topics
Advertiser Assistant Delegate Methods
func advertiserAssistantWillPresentInvitation(MCAdvertiserAssistant)
Indicates that the advertiser assistant is about to present an invitation to the user.
func advertiserAssistantDidDismissInvitation(MCAdvertiserAssistant)
Indicates that the advertiser assistant finished showing the invitation to the user.
Relationships
Inherits From
NSObjectProtocol

Multipeer Connectivity
MCBrowserViewControllerDelegate
Protocol
MCBrowserViewControllerDelegate
The MCBrowserViewControllerDelegate protocol defines the methods that your delegate object can implement to handle events related to the MCBrowserViewController class.
iOS 7.0+
iPadOS 7.0+
Mac Catalyst 13.0+
macOS 10.10+
tvOS 10.0+
visionOS 1.0+
protocol MCBrowserViewControllerDelegate : NSObjectProtocol
Overview
No assumption should be made about which queue the delegate methods are called on. It is the receiver’s responsibility to ensure that any UIKit-related updates are called on the main thread.
Topics
Peer Notifications
func browserViewController(MCBrowserViewController, shouldPresentNearbyPeer: MCPeerID, withDiscoveryInfo: [String : String]?) -> Bool
Called when a new peer is discovered to decide whether to show it in the user interface.
User Action Notifications
func browserViewControllerDidFinish(MCBrowserViewController)
Called when the browser view controller is dismissed with peers connected in a session.
Required
func browserViewControllerWasCancelled(MCBrowserViewController)
Called when the user cancels the browser view controller.
Required
Relationships
Inherits From
NSObjectProtocol

Multipeer Connectivity
MCNearbyServiceAdvertiserDelegate
Protocol
MCNearbyServiceAdvertiserDelegate
The MCNearbyServiceAdvertiserDelegate protocol describes the methods that the delegate object for an MCNearbyServiceAdvertiser instance can implement for handling events from the MCNearbyServiceAdvertiser class.
iOS 7.0+
iPadOS 7.0+
Mac Catalyst 13.0+
macOS 10.10+
tvOS 10.0+
visionOS 1.0+
protocol MCNearbyServiceAdvertiserDelegate : NSObjectProtocol
Overview
No assumption should be made about which queue the delegate methods are called on. It is the receiver’s responsibility to ensure that any UIKit updates are called on the main thread.
Topics
Error Handling Delegate Methods
func advertiser(MCNearbyServiceAdvertiser, didNotStartAdvertisingPeer: any Error)
Called when advertisement fails.
Invitation Handling Delegate Methods
func advertiser(MCNearbyServiceAdvertiser, didReceiveInvitationFromPeer: MCPeerID, withContext: Data?, invitationHandler: (Bool, MCSession?) -> Void)
Called when an invitation to join a session is received from a nearby peer.
Required
Relationships
Inherits From
NSObjectProtocol

Multipeer Connectivity
MCNearbyServiceBrowserDelegate
Protocol
MCNearbyServiceBrowserDelegate
The MCNearbyServiceBrowserDelegate protocol defines methods that a MCNearbyServiceBrowser object’s delegate can implement to handle browser-related events.
iOS 7.0+
iPadOS 7.0+
Mac Catalyst 13.0+
macOS 10.10+
tvOS 10.0+
visionOS 1.0+
protocol MCNearbyServiceBrowserDelegate : NSObjectProtocol
Overview
No assumption should be made about which queue the delegate methods are called on. It is the receiver’s responsibility to ensure that any UIKit updates are called on the main thread.
Topics
Error Handling Delegate Methods
func browser(MCNearbyServiceBrowser, didNotStartBrowsingForPeers: any Error)
Called when a browser failed to start browsing for peers.
Peer Discovery Delegate Methods
func browser(MCNearbyServiceBrowser, foundPeer: MCPeerID, withDiscoveryInfo: [String : String]?)
Called when a nearby peer is found.
Required
func browser(MCNearbyServiceBrowser, lostPeer: MCPeerID)
Called when a nearby peer is lost.
Required
Relationships
Inherits From
NSObjectProtocol
Conforming Types
MCBrowserViewController

Multipeer Connectivity
MCSessionDelegate
Protocol
MCSessionDelegate
The MCSessionDelegate protocol defines methods that a delegate of the MCSession class can implement to handle session-related events. For more information, see MCSession.
iOS 7.0+
iPadOS 7.0+
Mac Catalyst 13.0+
macOS 10.10+
tvOS 10.0+
visionOS 1.0+
protocol MCSessionDelegate : NSObjectProtocol
Overview
Delegate calls occur on a private serial queue. If your app needs to perform an action on a particular run loop or operation queue, its delegate method should explicitly dispatch or schedule that work.
Topics
MCSession Delegate Methods
func session(MCSession, didReceive: Data, fromPeer: MCPeerID)
Indicates that an NSData object has been received from a nearby peer.
Required
func session(MCSession, didStartReceivingResourceWithName: String, fromPeer: MCPeerID, with: Progress)
Indicates that the local peer began receiving a resource from a nearby peer.
Required
func session(MCSession, didFinishReceivingResourceWithName: String, fromPeer: MCPeerID, at: URL?, withError: (any Error)?)
Indicates that the local peer finished receiving a resource from a nearby peer.
Required
func session(MCSession, didReceive: InputStream, withName: String, fromPeer: MCPeerID)
Called when a nearby peer opens a byte stream connection to the local peer.
Required
func session(MCSession, peer: MCPeerID, didChange: MCSessionState)
Called when the state of a nearby peer changes.
Required
func session(MCSession, didReceiveCertificate: [Any]?, fromPeer: MCPeerID, certificateHandler: (Bool) -> Void)
Called to validate the client certificate provided by a peer when the connection is first established.
Relationships
Inherits From
NSObjectProtocol

Multipeer Connectivity
MCError
Structure
MCError
iOS 7.0+
iPadOS 7.0+
Mac Catalyst 13.1+
macOS 10.10+
tvOS 10.0+
visionOS 1.0+
struct MCError
Topics
Initializers
init(Code, userInfo: [String : Any])
Instance Properties
var code: Code
var errorCode: Int
var errorUserInfo: [String : Any]
var hashValue: Int
var userInfo: [String : Any]
Type Properties
static var cancelled: MCError.Code
static var errorDomain: String
static var invalidParameter: MCError.Code
static var notConnected: MCError.Code
static var timedOut: MCError.Code
static var unavailable: MCError.Code
static var unknown: MCError.Code
static var unsupported: MCError.Code
Instance Methods
func hash(into: inout Hasher)
Operator Functions
static func == (MCError, MCError) -> Bool
Enumerations
enum Code
Error codes found in MCErrorDomain error domain NSError objects returned by methods in the Multipeer Connectivity framework.